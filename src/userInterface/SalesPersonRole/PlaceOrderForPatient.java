/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.SalesPersonRole;

import Business.EcoSystem;
import Business.Enterprise.DrugDeliveryEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DeliveryOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.TestVitalsWorkRequest;
import business.Drug.Drug;
import business.Drug.DrugCatalog;
import business.Drug.InitializeDrug;
import business.Order.ChkOutOrder;
import business.Order.Order;
import business.Order.OrderItem;
import business.Validation.MyNumericVerifier;
import com.itextpdf.text.Document;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.CardLayout;
import java.awt.Component;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;

import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import net.glxn.qrgen.QRCode;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Multipart;

import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;

import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import net.glxn.qrgen.image.ImageType;

/**
 *
 * @author ruchi
 */
public class PlaceOrderForPatient extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private TestVitalsWorkRequest request;
    private DrugCatalog drugCatalog;
    private InitializeDrug initialize;
    private Order order;
    private ChkOutOrder chkOut;
    private int tot = 0;
    private static int i = 0;
    private static int j = 0;

    /**
     * Creates new form PlaceOrderForPatient
     */
    public PlaceOrderForPatient(JPanel upc, UserAccount ua, Enterprise e, TestVitalsWorkRequest r) {
        initComponents();
        MyNumericVerifier mnv = new MyNumericVerifier();
        txtQuan.setInputVerifier(mnv);

        jTextField1.setVisible(false);
//        lbQrC.setIcon(null);
        btnOk.setVisible(false);
        this.userProcessContainer = upc;
        this.userAccount = ua;
        this.enterprise = e;
        this.request = r;
        this.drugCatalog = new DrugCatalog();
        this.initialize = new InitializeDrug(drugCatalog);
        this.order = new Order();
        this.chkOut = e.getCoo();
        populateProductTable();
        txtSalesperson.setText(userAccount.getEmployee().getName());
        txtCustomer.setText(request.getPatientSender().getEmployee().getName());
    }

    private void populateProductTable() {
        int rowCount = productTable.getRowCount();
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        for (Drug drug : drugCatalog.getDrugList()) {
            Object row[] = new Object[3];
            row[0] = drug;
            row[1] = drug.getPrice();
            row[2] = drug.getId();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCustomer = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSalesperson = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        btnViewDrugsOrdered = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        addToOrderbtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtQuan = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        chkOutbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCustomer.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        add(txtCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 130, 107, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setText("PATIENT:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 130, -1, -1));

        txtSalesperson.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtSalesperson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalespersonActionPerformed(evt);
            }
        });
        add(txtSalesperson, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 107, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("SALES PERSON:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("PLACING ORDER FOR DRUGS");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, -1, -1));

        productTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "Price", "Drug Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 240, 979, 214));

        btnViewDrugsOrdered.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnViewDrugsOrdered.setText("View Drugs Ordered");
        btnViewDrugsOrdered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDrugsOrderedActionPerformed(evt);
            }
        });
        add(btnViewDrugsOrdered, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 550, 187, -1));

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        add(btnOk, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 600, -1, -1));

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 530, 430, 100));

        addToOrderbtn.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        addToOrderbtn.setText("ADD to Order");
        addToOrderbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToOrderbtnActionPerformed(evt);
            }
        });
        add(addToOrderbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 580, 130, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setText("Enter the Quantity");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 530, -1, -1));

        txtQuan.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        add(txtQuan, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 530, 130, -1));

        orderTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 660, 990, 240));

        btnRemove.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 930, -1, -1));

        chkOutbtn.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        chkOutbtn.setText("Check Out Order");
        chkOutbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOutbtnActionPerformed(evt);
            }
        });
        add(chkOutbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 930, -1, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton1.setText("<<BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 1000, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        jLabel7.setText("It will generate a QR code with a receipt And will send a mail to the patient ");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 970, 550, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\ruchi\\Desktop\\Final Project\\Project\\src\\userInterface\\Alien Ink 2560X1600 Abstract Background.jpg")); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 2260, 1680));
    }// </editor-fold>//GEN-END:initComponents

    private void txtSalespersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalespersonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalespersonActionPerformed
     private void populateProductByName(String n)
    {
        DefaultTableModel dtm= (DefaultTableModel) productTable.getModel();
        dtm.setRowCount(0);
        for(Drug d:drugCatalog.getDrugList()){
            if(d.getDrugName().equals(n)){
                Object row[] = new Object[3];
                row[0] = d;
                row[1] = d.getPrice();
                row[2] = d.getId();
                dtm.addRow(row);
                
            }      
        }
    }
    private void btnViewDrugsOrderedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDrugsOrderedActionPerformed
        btnOk.setVisible(true);

        jTextField1.setVisible(true);

        jTextField1.setText(request.getMedicines());
    }//GEN-LAST:event_btnViewDrugsOrderedActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed

        jTextField1.setVisible(false);
        btnOk.setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void addToOrderbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderbtnActionPerformed
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Plesse select a drug first");
        } else {
            Drug drug = (Drug) productTable.getValueAt(selectedRow, 0);
            String drugQuan = txtQuan.getText();
            if(drugQuan.isEmpty())
            {
               JOptionPane.showMessageDialog(null,"Please enter the quantity first");
            }
            else
            {
            int quantity = Integer.parseInt(txtQuan.getText());
            String spName = userAccount.getEmployee().getName();
            String patient = request.getPatientSender().getEmployee().getName();
            OrderItem oi = order.searchOrderItemByProduct(drug);
            if (oi != null) {
                oi.setQuantity(oi.getQuantity() + quantity);
            } else {
                order.addOrderItem(drug, quantity, spName, patient);
            }
            populateOrderTable(order);
            JOptionPane.showMessageDialog(null, "Drug added to the cart");
            }
            
        }
    }//GEN-LAST:event_addToOrderbtnActionPerformed
    private void sendMail() {
        String to = "gupta.ruchi19011991@gmail.com";
        //request.getPatientSender().getEmployee().geteMailId();
        String from = "gupta.r1901@gmail.com";
        String host = "smtp.gmail.com";
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication("gupta.r1901@gmail.com", "Sweethome@01472");
            }
        }
        );
        session.setDebug(true);
        try {

            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(from));
            message.setRecipient(Message.RecipientType.TO, new InternetAddress(to));
            message.setSubject("Order summary");

            BodyPart mbp = new MimeBodyPart();
            mbp.setText("Dear" + request.getPatientSender().getEmployee().geteMailId() + " ," + "\n" + "Please find the attached receipt of your order of Medicines");
            createPdf(order);
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(mbp);
            mbp = new MimeBodyPart();
            // String filename = "C:\\Users\\ruchi\\Documents\\NetBeansProjects\\latestnewCompleteProject\\RecieptPdf\\Receipt"+j+".pdf";
            String filename = "receipt" + j + ".pdf";
            DataSource source = new FileDataSource(filename);
            mbp.setDataHandler(new DataHandler(source));
            mbp.setFileName(filename);
            multipart.addBodyPart(mbp);
            message.setContent(multipart);
            Transport.send(message);
            JOptionPane.showMessageDialog(null, "message sent to " + "gupta.ruchi19011991@gmail.com");
            //request.getPatientSender().getEmployee().geteMailId());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();
        }
    }
    private void chkOutbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOutbtnActionPerformed
        if (order.getOrderItemList().size() > 0) {

            for (OrderItem ori : order.getOrderItemList()) {
                chkOut.addOrderItem(ori);
                tot = tot + ori.getQuantity() * Integer.parseInt(ori.getDrug().getPrice());
            }
            request.setTotAmount(tot);

            try {
                barcode(order);
            } catch (Exception ex) {
                Logger.getLogger(PlaceOrderForPatient.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                createPdf(order);
                JOptionPane.showMessageDialog(null, "Reciept has been generated");
            } catch (Exception ex) {
                Logger.getLogger(PlaceOrderForPatient.class.getName()).log(Level.SEVERE, null, ex);
            }

            sendMail();

            order = new Order();
            populateOrderTable(order);
            request.setStatus("Request has been sent to the Delivery person.");

            EcoSystem system = EcoSystem.getInstance();
            Enterprise erp = null;
            for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof DrugDeliveryEnterprise) {
                        erp = e;
                        Organization org = null;
                        for (Organization organization : erp.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof DeliveryOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkQueue().getWorkRequestList().add(request);
                            userAccount.getWorkQueue().getWorkRequestList().add(request);
                        }

                    }
                }
            }
            JOptionPane.showMessageDialog(null, "Request has been sent to Delivery person ");
        } else {
            JOptionPane.showMessageDialog(null, "No drug has been added to the cart ship to the patient");
        }
    }//GEN-LAST:event_chkOutbtnActionPerformed

    public void createPdf(Order order) throws Exception {
        ++j;
        Document document = new Document();
        //    PdfWriter.getInstance(document, new FileOutputStream("C:\\Users\\ruchi\\Documents\\NetBeansProjects\\latestnewCompleteProject\\RecieptPdf\\Receipt"+j+".pdf"));
        PdfWriter.getInstance(document, new FileOutputStream("receipt" + j + ".pdf"));
        document.open();
        document.add(new Paragraph(new Date().toString()));
        //        Image image=Image.getInstance("C:\\Users\\ruchi\\Documents\\NetBeansProjects\\latestnewCompleteProject\\barcodeGeneration\\barcode"+i+".JPG");
        Image image = Image.getInstance(i + ".JPG");
        document.add(new Paragraph("QRCode"));
        document.add(image);
        String drugs = "";
        for (OrderItem ot : order.getOrderItemList()) {
            drugs = drugs
                    + "\n" + "Customer Name: " + ot.getCustomerName()
                    + "\n" + "Sales Person Name: " + ot.getSalesPersonName()
                    + "\n" + "Drug Name: " + ot.getDrug().getDrugName()
                    + "\n" + "Drug Quantity: " + String.valueOf(ot.getQuantity())
                    + "\n" + "Drug Price: " + ot.getDrug().getPrice()
                    + "\n" + "Total Amount to be paid for this drug: " + String.valueOf(Float.parseFloat(ot.getDrug().getPrice()) * ot.getQuantity());
        }
        document.add(new Paragraph(drugs));
        document.close();
    }

    public void barcode(Order order) throws Exception {
        ByteArrayOutputStream out = null;
        String drugs = "";
        for (OrderItem ot : order.getOrderItemList()) {
            drugs = drugs
                    + "\n" + "Customer Name: " + ot.getCustomerName()
                    + "\n" + "Sales Person Name: " + ot.getSalesPersonName()
                    + "\n" + "Drug Name: " + ot.getDrug().getDrugName()
                    + "\n" + "Drug Quantity: " + String.valueOf(ot.getQuantity())
                    + "\n" + "Drug Price: " + ot.getDrug().getPrice()
                    + "\n" + "Total Amount to be paid for this drug: " + String.valueOf(Float.parseFloat(ot.getDrug().getPrice()) * ot.getQuantity());
        }
        System.out.println(" out" + out);
        System.out.println(" drugs" + drugs);
        out = QRCode.from(drugs).to(ImageType.JPG).stream();

        ++i;
        // File f = new File("C:\\Users\\ruchi\\Documents\\NetBeansProjects\\latestnewCompleteProject\\barcodeGeneration\\barcode"+i+".JPG");
        File f = new File(i + ".JPG");
        FileOutputStream fos = new FileOutputStream(f);
        fos.write(out.toByteArray());
        fos.flush();
    }

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed

        int selectedRow = orderTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a drug first");
        } else {
            OrderItem orderItem = (OrderItem) orderTable.getValueAt(selectedRow, 0);
            order.removeOrderItem(orderItem);
            populateOrderTable(order);
            JOptionPane.showMessageDialog(null,"Drug has been removed from the cart");
        }

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        userinterface.SalesPersonRole.SalesPersonWorkAreaJPanel salesPers = (userinterface.SalesPersonRole.SalesPersonWorkAreaJPanel) component;
        salesPers.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void populateOrderTable(Order order) {
        DefaultTableModel dtm = (DefaultTableModel) orderTable.getModel();
        dtm.setRowCount(0);
        for (OrderItem orderItem : order.getOrderItemList()) {
            Object[] row = new Object[4];
            row[0] = orderItem;
            row[1] = orderItem.getDrug().getPrice();
            row[2] = orderItem.getQuantity();
            row[3] = orderItem.getQuantity() * Integer.parseInt(orderItem.getDrug().getPrice());

            dtm.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToOrderbtn;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnViewDrugsOrdered;
    private javax.swing.JButton chkOutbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextField txtQuan;
    private javax.swing.JTextField txtSalesperson;
    // End of variables declaration//GEN-END:variables
}
